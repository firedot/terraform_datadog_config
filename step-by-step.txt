# This is a step-by-step guid for how the configuration was built:

- Generate a ssh key pari that you are going to use for accessing your machines:
```
ssh-keygen
```
- Add the public key generated to GCP: 
  - Go to [GCP Console](https://console.cloud.google.com)
  - Select your project from the drop-down menu on the top of the console
  - Navigate to ```Compute engine```
  - Go to "MetaData"
  - Go to "SSH Keys"
  - Click on ```Edit```
  - Click on ```Add Item```
  - Paste the public key from the private/public key pair that you generated

- Define the provider that is going to be used:
```provider "google" {
    credentials = "${file(/home/test/creds.json)}"
    project = "test-proj-241215"
    region = "${var.google_region}"

}
```
- Define a ```random_pet``` resource, that is going to be used to generate the srv names:

```
resource "random_pet" "srv_name" {
    length = 4
    prefix = "srv-"

}
```
- Define ```random_pet``` resource that is going to be used to generate names of other than servers resources:
```
resource "random_pet" "other_resource" {
    length = 10
    prefix = "other-"

}
````

- Create a ```google_compute_instance``` resource with Ephemeral IP:

```
resource "google_compute_instance" "server_1" {
      name         = "${random_pet.srv_name.id}"
        machine_type = "n1-standard-1"
          zone         = "${var.google_zone}"
            tags         = ["first-macihne", "testing"]

            boot_disk = {
                initialize_params {
                          image = "ubuntu-1810-cosmic-v20190514"
                              
                }
                  
            }

      network_interface {
              network = "default"
      access_config {
      #Ephemeral IP
    }
      }

  depends_on = ["google_compute_network.srv_net_1"]

}
```
- Create a network that the VM instance is going to use:

```
resource "google_compute_network" "srv_net_1" {
  name                    = "${random_pet.other_resource.id}"
  auto_create_subnetworks = true
}
```
- Create a firewall rule that will allow certain types of traffic:

```
resource "google_compute_firewall" "firewall-1" {
  name    = "${random_pet.other_resource.id}"
  network = "${google_compute_network.srv_net_1.name}"

  allow {
    protocol = "tcp"
    ports    = ["80", "8080", "22"]
  }
}
```
- Create ```outputs.tf``` and enter the outputs that you want to see in more accessible manner:

```
output "google_compute_instance server_1 name " {
      value = "${google_compute_instance.server_1.name}"

}

output "google_compute_instance server_1  External_IP" {
  value = "${google_compute_instance.server_1.network_interface.0.access_config.0.nat_ip}"
}

```
- Prepare for DataDog agent installation:
  - export the DataDog API key as bash environment variable:
  ```
  export datadog_api_key='<your_DataDog_API_key_goes_here'
  ```
